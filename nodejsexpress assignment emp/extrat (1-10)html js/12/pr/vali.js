import React, { Component } from 'react'const regForEmail=RegExp(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);const regForName = /^[a-zA-Z ]{2,100}$/;const regForMobile= /^[6-9][0-9]{9}$/;const regForAddress=/^[a-zA-Z0-9\s\,\''\-]*$/;export class Validation extends Component {    constructor(props){        super(props);        this.state={            name:null,            email:null,            password:null,            age:null,            mobile:null,            confirmpassword:null,            address:null,            errors:{                name:'',                email:'',                age:'',                password:'',                confirmpassword:'',                mobile:'',                address:''            },            names:[],            emails:[],            ages:[],            passwords:[],            mobiles:[],            addresses:[]                    }    }            handler=(event)=>{            const {name,value}=event.target;            let errors=this.state.errors;            switch(name){                                case 'name':                    errors.name=regForName.test(value)?'':'Name is not valid';                    break;                case 'email':                    errors.email=regForEmail.test(value)?'':'Email is not valid';                    break;                case 'age':                    errors.age=value<18?'Age is not valid':'';                    break;                case 'password':                    errors.password=value.length<8?'Password must be 8 chanraters long':'';                    break;                case 'confirmpassword':                    errors.confirmpassword=this.state.password!==value ?'Password dont match':'';                                                          break;                case 'mobile':                    errors.mobile=regForMobile.test(value)?'':'Please Enter a valid mobile no';                    break;                case 'address':                    errors.address=regForAddress.test(value)?'':'Not valid Address';                    break;               }            this.setState({errors,[name]:value},()=>{                console.log(errors)            })                    }        formSubmit=(event)=>{           event.preventDefault();                      if(this.validate(this.state.errors)&&(document.getElementById("name").value!=='')&&(document.getElementById("email").value!=='')&&(document.getElementById("age").value!=='')&&(document.getElementById("password").value!=='')&&(document.getElementById("confirmpassword").value!=='')&&(document.getElementById("mobile").value!=='')&&(document.getElementById("address").value!==''))           {               alert("Form Submitted");               var names = this.state.names;                names.push(this.state.name);                                var emails = this.state.emails;                emails.push(this.state.email)                                var ages = this.state.ages;                ages.push(this.state.age)                                var passwords = this.state.passwords;                passwords.push(this.state.password)                                var mobiles = this.state.mobiles;                mobiles.push(this.state.mobile)                                var addresses = this.state.addresses;                addresses.push(this.state.address)                this.setState({                names: names,                name: "",                               emails: emails,                email: "",                                ages: ages,                age:"",                               passwords: passwords,                password:"",                               mobiles: mobiles,                mobile:"",                               addresses:addresses,                address:"",                                });                document.getElementById("myForm").reset();           }           else {               alert("Please Enter Valid Data");           }        }         validate=(errors)=>{            let valid=true;            Object.values(errors).forEach((val)=> val.length >0 && (valid=false));            return valid;        }                        renderRows(){            var context = this;                return  this.state.names.map(function(o, i){                return(                    <tr key={i}>                    <td>{i+1}</td>                    <td>{o}</td>                    <td>{context.state.emails[i]}</td>                    <td>{context.state.ages[i]}</td>                    <td>{context.state.passwords[i]}</td>                    <td>{context.state.mobiles[i]}</td>                    <td>{context.state.addresses[i]}</td>                    </tr>                );            }            )        }    render() {        const {errors}=this.state;        return (            <div>                <h2> Form Validation</h2>                <form onSubmit={this.formSubmit} className="container-fluid" id="myForm">                                        <div className="row">                    <div className="form-group col-md-3">                                            <label class="form-label float-left">Name: </label><input type="name" name="name" id="name" class="form-control"  onChange={this.handler}/>                    </div>                     {errors.name.length>0 &&                     <div className="alert alert-danger col-md-3"  style={{color:'red'}}>{errors.name}</div>}<br/>                    </div>                                        <div className="row">                    <div className="form-group col-md-3">                    <label class="form-label float-left">Email: </label><input type="text" name="email" id="email" class="form-control" onChange={this.handler}/>                    </div>                     {errors.email.length>0 &&                     <span className="alert alert-danger col-md-3" style={{color:'red'}}>{errors.email}</span>}<br/>                    </div>                                       <div className="row">                    <div className="form-group col-md-3">                    <label class="form-label float-left">Age: </label><input type="number" id="age" name="age" class="form-control" onChange={this.handler}/>                    </div>                     {errors.age.length>0 &&                     <span className="alert alert-danger col-md-3" style={{color:'red'}}>{errors.age}</span>}<br/>                    </div>                                        <div className="row">                    <div className="form-group col-md-3">                    <label class="form-label float-left">Password: </label> <input type="password" id="password" name="password" class="form-control" onChange={this.handler}/>                    </div>                    {errors.password.length>0 &&                     <span className="alert alert-danger col-md-3" style={{color:'red'}}>{errors.password}</span>}<br/>                    </div>                                       <div className="row">                    <div className="form-group col-md-3">                    <label class="form-label float-left">Confirm Password: </label> <input type="password" id="confirmpassword" name="confirmpassword" class="form-control" onChange={this.handler}/>                    </div>                    {errors.confirmpassword.length>0 &&                     <span className="alert alert-danger col-md-3" style={{color:'red'}}>{errors.confirmpassword}</span>}<br/>                    </div>                                        <div className="row">                    <div className="form-group col-md-3">                    <label class="form-label float-left">Mobile: </label> <input type="number" id="mobile" name="mobile" class="form-control" onChange={this.handler}/>                    </div>                    {errors.mobile.length>0 &&                     <span className="alert alert-danger col-md-3" style={{color:'red'}}>{errors.mobile}</span>}<br/>                    </div>                                        <div className="row">                    <div className="form-group col-md-3">                    <label class="form-label float-left">Address: </label> <input type="address" id="address" name="address" class="form-control" onChange={this.handler}/>                    </div>                    {errors.address.length>0 &&                     <span className="alert alert-danger col-md-3" style={{color:'red'}}>{errors.address}</span>}<br/>                    </div>                                        <div className="form-group col-md-3">                    <input type="submit" value="submit" className="btn btn-primary"  onClick={this.handler.bind("Submit")}/>                    </div>                </form>                <br/><br/>                <table class="table container">                <thead class="thead-dark">                    <tr>                    <th scope="col">Sr. No</th>                    <th scope="col">Name</th>                    <th scope="col">Email</th>                    <th scope="col">Age</th>                    <th scope="col">Password</th>                    <th scope="col">Mobile</th>                    <th scope="col">Address</th>                    </tr>                </thead>                <tbody>                {this.renderRows()}                </tbody>                </table>            </div>        )    }}export default Validation